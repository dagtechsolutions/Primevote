<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>PrimeVote</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="stylesheet" href="primevote.css">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
<header>
  <h1>PrimeVote</h1>
  <div id="vote-status" class="mt-2 text-lg"></div>
</header>

<main>
  <!-- Admin Section -->
  <section id="admin-section" class="bg-white p-6 rounded-lg shadow mb-10">
    <h2>Admin Panel</h2>
    <div class="mb-4">
      <button id="toggle-voting-btn">Open Voting</button>
      <span id="current-voting-state" class="font-semibold"></span>
    </div>
    <div class="mb-4">
      <h3 class="font-semibold mb-1">Bulk Upload Voter IDs</h3>
      <textarea id="voters-textarea" rows="3" placeholder="Paste 140 voter IDs, one per line"></textarea>
      <button id="upload-voters-btn">Upload Voters</button>
    </div>
    <div class="mb-4">
      <h3 class="font-semibold mb-1">Add Contestant</h3>
      <form id="add-contestant-form" class="space-y-2">
        <input type="text" id="contestant-name" placeholder="Name" required>
        <input type="text" id="contestant-position-key" placeholder="Position Key (e.g. president)" required>
        <input type="text" id="contestant-position-label" placeholder="Position Label (e.g. President)" required>
        <input type="text" id="contestant-description" placeholder="Description" required>
        <input type="file" id="contestant-photo" accept="image/*">
        <button type="submit">Add</button>
      </form>
    </div>
    <div>
      <h3 class="font-semibold mb-1">Contestants</h3>
      <ul id="admin-contestant-list"></ul>
    </div>
    <div class="mt-4 text-sm text-gray-600">Note: Only admin can see this section.</div>
  </section>

  <!-- Voter Section -->
  <section id="voter-section" class="bg-white p-6 rounded-lg shadow mb-10">
    <h2>Voter Login & Voting</h2>
    <form id="voter-login-form" class="mb-5 flex items-center space-x-2">
      <input type="text" id="voter-id-input" placeholder="Enter your Voter ID" required>
      <button type="submit">Login</button>
    </form>
    <div id="voter-status" class="mb-5"></div>
    <form id="voting-panel" class="hidden">
      <div id="positions-list"></div>
      <button type="submit">Submit Votes</button>
    </form>
  </section>

  <!-- Results Section -->
  <section class="bg-white p-6 rounded-lg shadow">
    <h2>Live Results</h2>
    <div id="results"></div>
  </section>
</main>

<script>
const BACKEND_URL = 'http://localhost:4000'; // update as needed

// ---- Admin Logic ----
async function refreshAdminContestants() {
  const listEl = document.getElementById('admin-contestant-list');
  const contestants = await fetchJSON(`${BACKEND_URL}/api/contestants`);
  listEl.innerHTML = '';
  contestants.forEach(c => {
    let li = document.createElement('li');
    li.textContent = `${c.name} (${c.positionLabel}) - ${c.description}`;
    listEl.appendChild(li);
  });
}
document.getElementById('add-contestant-form').onsubmit = async (e) => {
  e.preventDefault();
  const formData = new FormData();
  formData.append('name', document.getElementById('contestant-name').value);
  formData.append('positionKey', document.getElementById('contestant-position-key').value);
  formData.append('positionLabel', document.getElementById('contestant-position-label').value);
  formData.append('description', document.getElementById('contestant-description').value);
  if (document.getElementById('contestant-photo').files[0])
    formData.append('photo', document.getElementById('contestant-photo').files[0]);
  await fetch(`${BACKEND_URL}/api/contestants`, {
    method: 'POST', body: formData
  });
  e.target.reset();
  refreshAdminContestants();
  renderResults();
};

document.getElementById('upload-voters-btn').onclick = async () => {
  const lines = document.getElementById('voters-textarea').value.trim().split('\n').map(x=>x.trim()).filter(x=>x);
  if (lines.length !== 140) {
    alert("You must enter exactly 140 voter IDs (one per line).");
    return;
  }
  await fetchJSON(`${BACKEND_URL}/api/voters`, {
    method: 'POST',
    body: JSON.stringify({voterIds: lines})
  });
  alert("Voters uploaded!");
};

async function refreshVotingState() {
  const res = await fetchJSON(`${BACKEND_URL}/api/voting-state`);
  document.getElementById('current-voting-state').textContent = res.votingOpen ? 'Voting is OPEN' : 'Voting is CLOSED';
  document.getElementById('toggle-voting-btn').textContent = res.votingOpen ? 'Close Voting' : 'Open Voting';
  document.getElementById('vote-status').textContent = res.votingOpen ? 'Voting is OPEN' : 'Voting is CLOSED';
}
document.getElementById('toggle-voting-btn').onclick = async () => {
  const state = await fetchJSON(`${BACKEND_URL}/api/voting-state`);
  await fetchJSON(`${BACKEND_URL}/api/voting-state`, {
    method: 'POST',
    body: JSON.stringify({open: !state.votingOpen}),
  });
  refreshVotingState();
};
refreshAdminContestants();
refreshVotingState();

// ---- Voter Logic ----
let voterId = '';
let voterVotes = {};

document.getElementById('voter-login-form').onsubmit = async (e) => {
  e.preventDefault();
  voterId = document.getElementById('voter-id-input').value.trim();
  if (!voterId) return;
  const res = await fetchJSON(`${BACKEND_URL}/api/voter-auth`, {
    method: 'POST', body: JSON.stringify({voterId})
  });
  if (res.error) {
    document.getElementById('voter-status').textContent = "Invalid Voter ID!";
    document.getElementById('voting-panel').classList.add('hidden');
    return;
  }
  voterVotes = Object.fromEntries(Object.entries(res.votes||{}));
  document.getElementById('voter-status').textContent = "You are eligible to vote for open positions.";
  document.getElementById('voting-panel').classList.remove('hidden');
  renderVotingPanel();
};

async function renderVotingPanel() {
  // Get contestant groups
  const res = await fetchJSON(`${BACKEND_URL}/api/results`);
  const positionsList = document.getElementById('positions-list');
  positionsList.innerHTML = '';
  for (const [pkey, pdata] of Object.entries(res)) {
    const votedFor = voterVotes[pkey];
    let html = `<div class="mb-6"><div class="font-bold mb-1">${pdata.label}</div><div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">`;
    pdata.list.forEach(cont => {
      html += `
        <label class="bg-gray-100 rounded p-3 flex items-center space-x-3 cursor-pointer">
          <input type="radio" name="vote_${pkey}" value="${cont._id}" ${votedFor==cont._id?'checked':''} ${votedFor?'disabled':''}>
          <img src="${cont.photo||'https://via.placeholder.com/40'}" class="w-10 h-10 rounded-full object-cover"/>
          <span>
            <span class="font-semibold">${cont.name}</span>
            <span class="block text-xs text-gray-500">${cont.description||''}</span>
          </span>
        </label>
      `;
    });
    html += `</div>`;
    if (votedFor) html += `<div class="text-green-700 mt-2">Voted</div>`;
    html += `</div>`;
    positionsList.innerHTML += html;
  }
}

// Vote submission
document.getElementById('voting-panel').onsubmit = async (e) => {
  e.preventDefault();
  // Gather votes for positions not yet voted
  const votes = {};
  Array.from(document.querySelectorAll('[name^="vote_"]')).forEach(inp => {
    if (inp.checked && !voterVotes[inp.name.slice(5)]) {
      votes[inp.name.slice(5)] = inp.value;
    }
  });
  if (Object.keys(votes).length === 0) {
    alert("You have already voted for all positions, or haven't selected any new choices.");
    return;
  }
  await fetchJSON(`${BACKEND_URL}/api/vote`, {
    method: 'POST', body: JSON.stringify({voterId, votes})
  });
  alert("Your votes have been recorded!");
  // Refresh voterVotes and panel
  const res = await fetchJSON(`${BACKEND_URL}/api/voter-auth`, {
    method: 'POST', body: JSON.stringify({voterId})
  });
  voterVotes = Object.fromEntries(Object.entries(res.votes || {}));
  renderVotingPanel();
  renderResults();
};

// ---- Live Results ----
async function renderResults() {
  const res = await fetchJSON(`${BACKEND_URL}/api/results`);
  const resultsDiv = document.getElementById('results');
  resultsDiv.innerHTML = '';
  for (const [pkey, pdata] of Object.entries(res)) {
    resultsDiv.innerHTML += `<div class="mb-4"><div class="font-bold mb-1">${pdata.label}</div>`;
    // Bar
    const totalVotes = pdata.list.reduce((a,c)=>a+c.votes,0)||1;
    pdata.list.forEach(c => {
      const percent = c.votes/totalVotes*100;
      resultsDiv.innerHTML += `
        <div class="flex justify-between">
          <span>${c.name}</span>
          <span>${c.votes} votes (${percent.toFixed(1)}%)</span>
        </div>
        <div class="w-full bg-gray-200 h-2 rounded mb-1">
          <div class="bg-purple-600 h-2 rounded" style="width:${percent}%;"></div>
        </div>
      `;
    });
    resultsDiv.innerHTML += `</div>`;
  }
}
renderResults();
setInterval(renderResults, 2500);

// --- Helper ---
function fetchJSON(url, options={}) {
  return fetch(url, {headers: {'Content-Type':'application/json'}, ...options})
    .then(r => r.json());
}
</script>
</body>
</html>
